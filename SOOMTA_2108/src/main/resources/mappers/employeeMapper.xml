<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mappers.employeeMapper">

<!-- 관리자/내정보 관리 -->
<sql id="baseColumn">
	emp_Id empId, emp_Pw empPw, emp_Name empName, emp_Job empJob, 
	hire_Date hireDate, emp_Email empEmail, emp_Phone empPhone, emp_Addr empAddr 
</sql>

<select id="empInfo" parameterType="String" resultType="Model.EmployeeDTO">
	select <include refid="baseColumn"/>
	from employees
	where emp_Id = #{empId}
</select>

<select id="empList" resultType="Model.EmployeeDTO" parameterType="Model.EmployeeDTO">
	select rn, empId, empName, empJob, hireDate 
    from (select rownum rn, empId, empName, empJob, hireDate 
    from (select emp_Id empId, emp_Name empName, emp_Job empJob, hire_Date hireDate from employees order by hireDate desc) 
    order by hireDate desc) 
    where rn between #{startEndPageDTO.startRow} and #{startEndPageDTO.endRow} 
    order by hireDate desc
</select>

<select id="countE" resultType="int">
	select count(*) from employees
</select>

<delete id="empCkDel" parameterType="hashMap">
	delete from employees
	<where>
		<if test="empIds != null">
			emp_id in 
			<foreach collection="empIds" item="empId" index="index" 
				open="(" close=")" separator=",">
				#{empId}
			</foreach>
		</if>
	</where>
</delete>

<insert id="empInsert" parameterType="Model.EmployeeDTO">
	insert into employees(emp_Id, emp_Pw, emp_Name, emp_Job, hire_Date, 
	emp_Email, emp_Phone, emp_Addr) 
	values(#{empId}, #{empPw}, #{empName}, #{empJob}, #{hireDate}, 
	#{empEmail}, #{empPhone}, #{empAddr})

</insert>

<delete id="empDel" parameterType="String">
	delete from employees where emp_id = #{empId}
</delete>

<update id="empUpdate" parameterType="Model.EmployeeDTO">
	update employees
	set emp_Addr = #{empAddr}, emp_Email = #{empEmail}, emp_Job = #{empJob}, emp_Name = #{empName},
		emp_Phone = #{empPhone}, hire_Date = #{hireDate}
	where emp_id = #{empId}	
</update>

<update id="empPwUpdate" parameterType="Model.EmployeeDTO">
	update employees
	set emp_Pw = #{empPw}
	where emp_id = #{empId}
</update>

<update id="myInfoUpdate" parameterType="Model.EmployeeDTO">
	update employees
	set emp_Addr = #{empAddr}, emp_Email = #{empEmail}, emp_Phone = #{empPhone}
	where emp_id = #{empId}	
</update>


<!-- 튜터 관리 -->
<sql id="tutorBasic">
	tutor_Id tutorId, tutor_Name tutorName, tutor_Dob tutorDob, tutor_Gender tutorGender, tutor_Phone tutorPhone, 
	tutor_Email tutorEmail, tutor_Since tutorSince, tutor_Email_Ck tutorEmailCk, tutor_Email_Ok tutorEmailOk
</sql>
<sql id="profile">
	tutor_Certification tutorCertification, tutor_Career tutorCareer, tutor_Image tutorImage, tutor_Introduce tutorIntroduce, tutor_Likearea tutorLikeArea 
</sql>

<select id="tutorList" resultType="Model.TutorDTO">
	select tutor_Id tutorId, tutor_Name tutorName, tutor_Since tutorSince 
	from tutor order by tutor_Since desc
</select>

<select id="tutorInfo" resultType="Model.TutorDTO" parameterType="string">
	select  <include refid="tutorBasic"/>, substr(tutor_Area,0,6) tutorArea 
	from tutor
	where tutor_id = #{tutorId}
</select>

<select id="tutorProfile" resultType="Model.TutorDTO" parameterType="string">
	select  <include refid="profile"/>, tutor_Id tutorId 
	from tutor
	where tutor_id = #{tutorId}
</select>

<delete id="tutorDel" parameterType="String">
	delete from tutor where tutor_id = #{tutorId}
</delete>

<update id="tutorPwUpdate" parameterType="Model.TutorDTO">
	update tutor
	set tutor_Pw = #{tutorPw}
	where tutor_id = #{tutorId}
</update>

<update id="tutorUpdate"  parameterType="Model.TutorDTO">
	update tutor 
	set tutor_Area = #{tutorArea}, tutor_Dob = #{tutorDob}, tutor_Email = #{tutorEmail}, tutor_Email_Ck = #{tutorEmailCk}, tutor_Gender = #{tutorGender}, 
		tutor_Name = #{tutorName}, tutor_Phone = #{tutorPhone}, tutor_Email_Ok = #{tutorEmailOk} 
	where tutor_id = #{tutorId}
</update>

<update id="tutorProfileUpdate"  parameterType="Model.TutorDTO">
	update tutor 
	set tutor_Certification = #{tutorCertification}, tutor_Career = #{tutorCareer}, tutor_FinalEdu = #{tutorFinalEdu}, tutor_Respond = #{tutorRespond}, tutor_Likearea = #{tutorLikearea}, 
		tutor_Introduce = #{tutorIntroduce} 
	where tutor_id = #{tutorId}
</update>


<!-- 회원 관리 -->
<sql id="memCol">
	mem_Id memId, mem_Name memName, mem_Phone memPhone, mem_Since memSince, mem_Gender memGender, mem_Dob memDob, 
	mem_Email memEmail, mem_Email_Ck memEmailCk
</sql>

<select id="memList" resultType="Model.MemberDTO" parameterType="Model.MemberDTO">
	select rn, memId, memName, memSince 
    from (select rownum rn,memId, memName, memSince 
    from (select mem_Id memId, mem_name memName, mem_Since memSince from member order by memSince desc) 
    order by memSince desc) 
    where rn between #{startEndPageDTO.startRow} and #{startEndPageDTO.endRow} 
    order by memSince desc
</select>

<select id="memInfo" parameterType="string" resultType="Model.MemberDTO">
	select <include refid="memCol"/>, substr(mem_Area,0,6) memArea 
	from member
	where mem_id = #{memId}
</select>

<delete id="memDel" parameterType="String">
	delete from member where mem_id = #{memId}
</delete>

<update id="memPwUpdate" parameterType="Model.MemberDTO">
	update member
	set mem_Pw = #{memPw}
	where mem_id = #{memId}
</update>

<update id="memUpdate"  parameterType="Model.MemberDTO">
	update member
	set mem_Area = #{memArea}, mem_Dob = #{memDob}, mem_Email = #{memEmail}, mem_Email_Ck = #{memEmailCk}, mem_Gender = #{memGender}, 
		mem_Name = #{memName}, mem_Phone = #{memPhone} 
	where mem_id = #{memId}
</update>

<select id="countM" resultType="int">
	select count(*) from member
</select>

<!-- 게시판 관리 -->
<select id="boardList" resultType="Model.FaqDTO" parameterType="Model.FaqDTO">
	select rn, faqNo, empId, faqCategory, faqCtgrS, faqDate, faqTitle, faqHit 
    from (select rownum rn, faqNo, empId, faqCategory, faqCtgrS, faqDate, faqTitle, faqHit 
    from (select faq_No faqNo, emp_Id empId, faq_Category faqCategory, faq_Ctgr_S faqCtgrS , faq_Date faqDate, faq_Title faqTitle, faq_Hit faqHit from faq order by faqDate desc) 
    order by faqDate desc) 
    where rn between #{startEndPageDTO.startRow} and #{startEndPageDTO.endRow} 
    order by faqDate desc
</select>

<select id="countB" resultType="int">
	select count(*) from faq
</select>

<select id="faqNo" resultType="long">
	select to_char(sysdate,'yyyymmdd') || faq_Num.nextval from dual
</select>

<insert id="faqInsert" parameterType="Model.FaqDTO">
	insert into faq(FAQ_NO, EMP_ID, FAQ_CATEGORY, FAQ_CONTENTS, FAQ_IMG, FAQ_TITLE, FAQ_DATE, FAQ_CTGR_S, faq_hit) 
	values (#{faqNo}, #{empId}, #{faqCategory}, #{faqContents}, 
	<if test="faqImg != null">#{faqImg}</if>
	<if test="faqImg == null">null</if>
	, #{faqTitle}, sysdate, #{faqCtgrS}, 0) 
</insert>

<select id="boardInfo" parameterType="string" resultType="Model.FaqDTO">
	select faq_No faqNo, faq_Category faqCategory, faq_Ctgr_S faqCtgrS, faq_Date faqDate, 
	 		emp_Id empId, faq_Title faqTitle, faq_Contents faqContents, faq_Img faqImg, faq_Hit faqHit  
	 		from faq where faq_No = #{faqNo}
</select>

<delete id="boardDel" parameterType="string">
	delete from faq where faq_No = #{faqNo}
</delete>

<update id="boardUpdate" parameterType="Model.FaqDTO">
	update faq
	set faq_Category = #{faqCategory}, faq_Ctgr_S = #{faqCtgrS}, emp_Id = #{empId}, faq_Title = #{faqTitle}, 
	faq_Contents = #{faqContents}, faq_date = sysdate, 
	<if test="faqImg != null">faq_Img = #{faqImg} </if> 
	<if test="faqImg == null">faq_Img = null </if> 
 	where faq_No = #{faqNo}
</update>

<delete id="faqCkDel" parameterType="hashMap">
	delete from faq
	<where>
		<if test="faqNums != null">
			faq_No in 
			<foreach collection="faqNums" item="faqNum" index="index" 
				open="(" close=")" separator=",">
				#{faqNo}
			</foreach>
		</if>
	</where>
</delete>
</mapper>






